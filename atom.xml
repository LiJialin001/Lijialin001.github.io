<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wonderland</title>
  <icon>https://www.gravatar.com/avatar/9678facf9f7cbd47edda50e4c5418b27</icon>
  
  <link href="http://wonderland.plus/atom.xml" rel="self"/>
  
  <link href="http://wonderland.plus/"/>
  <updated>2022-04-04T16:53:12.711Z</updated>
  <id>http://wonderland.plus/</id>
  
  <author>
    <name>A.S.</name>
    <email>lijialin_3737@icloud.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Coding Anywhere</title>
    <link href="http://wonderland.plus/posts/50883/"/>
    <id>http://wonderland.plus/posts/50883/</id>
    <published>2022-04-04T10:18:22.000Z</published>
    <updated>2022-04-04T16:53:12.711Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>到处编程的身影，挺有趣的，就记录一下</p><hr><h2 id="我都想不到，学的第一门编程语言是Octave🤣"><a href="#我都想不到，学的第一门编程语言是Octave🤣" class="headerlink" title="我都想不到，学的第一门编程语言是Octave🤣"></a>我都想不到，学的第一门编程语言是Octave🤣</h2><p>大一自习的时候，在写吴恩达机器学习课程的编程作业，从此coding成为了我大学生活的一部分</p><blockquote><p>Octave 免费版的Matlab，除了图形化界面拉垮，其他都可。但鉴于是免费开源的，已经很不错了</p></blockquote><p><img src="https://blogimgs-1310551706.cos.ap-beijing.myqcloud.com//octaveML.jpeg" alt="第一次写出线性回归hhh"></p><hr><h2 id="信号课的早八，而我在……"><a href="#信号课的早八，而我在……" class="headerlink" title="信号课的早八，而我在……"></a>信号课的早八，而我在……</h2><p>本来以为是在写微北洋，仔细一看是之前的 <strong>DDL Helper</strong> 哈哈，好像当时是有比赛比较急，否则我一般是听课的（开始大言不惭了hhh</p><p>从模糊的背景看得出是在讲取样函数时域的变换哈（或者是脉冲宽度&#x2F;周期 和 频谱的关系也有可能，看是第几章了</p><p><img src="https://blogimgs-1310551706.cos.ap-beijing.myqcloud.com//morning.jpeg" alt="DDL Helper!"></p><hr><h2 id="熬夜……这样的夜晚太多了"><a href="#熬夜……这样的夜晚太多了" class="headerlink" title="熬夜……这样的夜晚太多了"></a>熬夜……这样的夜晚太多了</h2><p><img src="https://blogimgs-1310551706.cos.ap-beijing.myqcloud.com//codenight.jpeg" alt="独自熬夜的夜晚"></p><hr><h2 id="高铁上也打过代码，然后晕车"><a href="#高铁上也打过代码，然后晕车" class="headerlink" title="高铁上也打过代码，然后晕车"></a>高铁上也打过代码，然后晕车</h2><p>晕车的症状一直持续到了回家的第二天 bbzl</p><p>再也不在车上看电脑了</p><p><img src="https://blogimgs-1310551706.cos.ap-beijing.myqcloud.com//traincode.jpeg" alt="高铁上的coding，晕了，没留下Mac的图hh"></p><hr><h3 id="持续记录中📝……"><a href="#持续记录中📝……" class="headerlink" title="持续记录中📝……"></a>持续记录中📝……</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="生活" scheme="http://wonderland.plus/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="Code" scheme="http://wonderland.plus/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>早期驯服小车记录</title>
    <link href="http://wonderland.plus/posts/13444/"/>
    <id>http://wonderland.plus/posts/13444/</id>
    <published>2022-04-04T10:14:49.000Z</published>
    <updated>2022-04-04T16:18:51.652Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="嵌入式开发" scheme="http://wonderland.plus/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="循迹小车" scheme="http://wonderland.plus/tags/%E5%BE%AA%E8%BF%B9%E5%B0%8F%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>爱的诗</title>
    <link href="http://wonderland.plus/posts/26780/"/>
    <id>http://wonderland.plus/posts/26780/</id>
    <published>2022-04-04T10:13:44.000Z</published>
    <updated>2022-04-04T16:17:57.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一些古诗，<del>装一下</del> 文艺青年</p><hr><h2 id="正月十五夜"><a href="#正月十五夜" class="headerlink" title="正月十五夜"></a><strong>正月十五夜</strong></h2><p><strong>【唐代】苏味道</strong></p><p>火树银花合，星桥铁锁开。</p><p>暗尘随马去，明月逐人来。</p><p>游伎皆秾李，行歌尽落梅。</p><p>金吾不禁夜，玉漏莫相催。</p><blockquote><p>在唐代（至少是苏味道这个时代）我国一直施行 <strong>宵禁</strong> ，但唯独正月十五（加上十四、十六）这一天的夜晚允许百姓自由活动（铁锁开）。</p><p>火树银花这里特指上元节的灯景</p><p>星桥：天津三桥之一hhh</p><p>这一天会有俊男俊女走上街头丢手绢已示好感hhh</p></blockquote><h5 id="最爱：暗尘随马去，明月逐人来。"><a href="#最爱：暗尘随马去，明月逐人来。" class="headerlink" title="最爱：暗尘随马去，明月逐人来。"></a>最爱：暗尘随马去，明月逐人来。</h5><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="诗词" scheme="http://wonderland.plus/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
    <category term="文艺青年" scheme="http://wonderland.plus/tags/%E6%96%87%E8%89%BA%E9%9D%92%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>《A Mathematical Theory of Communication》译文及解读</title>
    <link href="http://wonderland.plus/posts/39005/"/>
    <id>http://wonderland.plus/posts/39005/</id>
    <published>2022-04-03T02:51:51.000Z</published>
    <updated>2022-04-04T19:18:31.927Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>祖师爷的开山之作，这篇论文标志着信息论的诞生，也将人类社会拉入了信息时代</p><p>PS：这也是我昵称的由来 A.S. 即 After Shannon （一些科幻小说以此记年</p><p><img src="https://blogimgs-1310551706.cos.ap-beijing.myqcloud.com//ShannonWheel.JPG" alt="杂耍和独轮车是祖师爷的一大爱好"></p><h1 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h1><p>近年来，各种调制方法如 PCM 和 PPM 通过增加带宽换取更低的信噪比，增加了人们对通信一般理论的兴趣。奈奎斯特[^1] 和哈特利[^2] 关于这一问题的重要论文中包含了这种理论的基础。在本文中，我们将扩展该理论，增加许多新的因素，尤其是信道中噪声的影响，以及在原始消息的统计结构和信息最终目的地的性质（不变）而可能的节省（带宽？）。</p><blockquote><p>PCM: <strong>Pulse-code modulation</strong>  即 脉冲编码调制，一种将模拟信号数字化的方法，详见<a href="https://en.wikipedia.org/wiki/Pulse-code_modulation">PCM</a></p></blockquote><blockquote><p>PPM: <strong>Pulse-position modulation</strong> 即 脉冲位置调制，一种调制信号的方法，详见<a href="https://zh.wikipedia.org/wiki/%E8%84%89%E5%86%B2%E4%BD%8D%E7%BD%AE%E8%B0%83%E5%88%B6">PPM</a></p></blockquote><p>通信的基本问题是在一个地方上准确或近似地再现在另一个地方上选择（发送）的消息。这些信息往往有<strong>意义</strong>；也就是说，它们指代或依据 具有某些物理或概念实体的系统，<strong>通信的语义方面与工程问题无关</strong>。重要的是，实际信息是从一组可能的信息中<strong>选择</strong>的。系统的设计必须使每个可能的选择都可以运行，而不仅仅是实际的选择，因为在设计系统时选择是未知的。</p><p>如果集合中的消息数量是有限的，且所有选择的概率都是相同的，那么一个数字或是一个数字的任何单调函数可以被视为从集合中选择一条消息时所产生的信息的度量。正如哈特利所指出的，最自然的选择是<strong>对数函数</strong>。但是当我们考虑消息的统计信息，并且有一个连续的消息范围时，这个定义必须被极大地推广，我们将在所有的情况下使用同一个基本的对数度量。</p><p>由于以下各种原因，对数度量更方便：</p><ol><li>它实际上更有用。工程中重要的参数，如时间、带宽、继电器数量等，往往随概率的对数线性变化。例如，将一个继电器添加到一个组（group，不知道是什么）中会使继电器的可能状态数翻倍。这个数字对<strong>以2为底的对数</strong>加1。时间翻倍大致等于可能的消息数的平方，或是其对数翻倍，等等。</li><li>它更接近于我们对正确度量的直觉。这与第一点密切相关，因为我们通过与通用标准的线性变化比较直观地衡量实体。例如，人们认为，两张穿孔卡片的信息存储容量应该是一张穿孔卡片的两倍，（两张穿孔卡片）传输信息的两个相同通道的容量应该是一张穿孔卡片的两倍。</li><li>这在数学上更合适。许多限制操作在对数方面很简单，但在概率方面需要复杂的描述。</li></ol><p>选择不同对数底数对应于不同的测量信息的单位。如果使用底数2，结果单位可能被称为二进制数字（binary digits），或是更简洁的 <strong>bits</strong>，一个由 J.W.Tukey（快速傅立叶变换发明人）建议的单词。具有两个稳定状态的设备，如继电器或触发器电路，可以存储一比特信息。N这样的设备可以存储N比特，因为可能状态的总数是 $2^N$，$log_22^N&#x3D;N$ 。如果使用底数10，则单位可以称为decimal digits。这样一dit就大致等于 $3\frac{1}3$bit。$$\begin{align*} log_2M &amp;&#x3D; log_{10}M&#x2F;log_{10}2 \\  &amp;&#x3D;3.32 log_{10}M \end{align*}$$    台式计算机上的数字轮有十个稳定的位置（显然现在的现代计算机不是这样的😂），因此具有一个十进制数字的存储容量。在涉及整合和差异化的分析工作中，基数 $e$ 有时是有用的。由此产生的信息单位将被称为自然单位（即奈特）。从基数 $a$ 到基数 $b$ 的变化只需要乘以 $log_ba$ 即可。</p><p><img src="https://blogimgs-1310551706.cos.ap-beijing.myqcloud.com//paper1.png" alt="图1"></p><p>我们所说的通信系统是指图1中示意性指示的系统。它基本上由五部分组成：</p><ol><li><p>信源，它产生一条消息或一系列消息，并传送给接收终端。信息可以有多种类型：</p><ul><li><p>电传系统电报中的字母序列</p></li><li><p>时间 $f(t)$ 的单一函数，如在无线电或电话中</p></li><li><p>时间和其他变量的函数，如在黑白电视中</p><blockquote><p>在这里，信息可以被认为是两个空间坐标和时间函数 $f(x) , f(y)$ 点 $(x,y)$ 的亮度和拾取管板上的时间 $t$</p></blockquote></li><li><p>两个或两个以上的时间函数，例如 $f(t),g(t),h(t)$</p></li></ul><blockquote><p>三维声音传输，或系统打算在多路传输中为多个单独的通道提供服务，则也为这种情况</p></blockquote><ul><li><p>几个变量的函数</p><blockquote><p>在彩色电视中，信息由三个定义在一个三维连续体中的函数 $f(x,y,t),g(x,y,t),h(x,y,t)$ 组成，我们也可以将这三个函数视为该区域定义的向量场的组成部分，类似地，几个黑白电视源将产生由多个三变量函数组成的“信息”</p></blockquote></li><li><p>以上的各种组合也会出现</p><blockquote><p>例如在具有相关音频频道的电视中。</p></blockquote></li></ul></li><li><p>以某种方式对信息进行操作以产生适合通过信道传输的信号的发射器。在电话技术中，这种操作仅仅是将声压转换成与之成比例的电流。在电报中，我们有一种编码操作，它在信道上产生一系列与信息对应的点、破折号和空格（摩尔斯）。在多路PCM系统中，必须对不同的语音功能进行采样、压缩、量化和编码，并最终进行适当的插值以构造信号。声码器系统（？）、电视和频率调制是应用于消息以获得信号的复杂操作的其他示例。</p></li><li><p>信道仅仅是用来将信号从发射机传输到接收机的媒介。它可能是一对电线、一根同轴电缆、一段无线电频率、一束光束等等（祖师爷的神预言啊，光纤的坑这时候就挖了吗？）</p></li><li><p>接收机通常执行与发射机相反的操作，从信号中重构信息</p></li><li><p>目的地是消息要传达给的人（或物）</p></li></ol><p>我们希望考虑一些涉及通信系统的一般问题。要做到这一点，首先需要将涉及的各种元素表示为数学实体，并对物理实体进行适当的理想化。我们可以大致将通信系统分为三大类：离散、连续和混合。我们所说的<strong>离散系统是指信息和信号都是离散符号序列的系统</strong>。一个典型的例子是电报，其中信息是字母序列，信号是点、破折号和空格序列。<strong>连续系统是指信息和信号都被视为连续的系统</strong>，例如收音机或电视。混合系统是同时出现离散变量和连续变量的系统，例如语音的PCM传输。<br>我们首先考虑离散情形。这件事不仅在通信理论中有应用，而且在计算机理论、电话交换机设计和其他领域也有应用。此外，离散的情况是连续和混合情况的基础，后两者将在论文的后半部分讨论。</p><p><img src="https://blogimgs-1310551706.cos.ap-beijing.myqcloud.com//Shannon.jpeg" alt="香农的肖像照，此摄影师拍摄过许多伟大的人物"></p><h1 id="PART-I-DISCRETE-NOISELESS-SYSTEMS"><a href="#PART-I-DISCRETE-NOISELESS-SYSTEMS" class="headerlink" title="PART I: DISCRETE NOISELESS SYSTEMS"></a>PART I: DISCRETE NOISELESS SYSTEMS</h1><h2 id="1-THE-DISCRETE-NOISELESS-CHANNEL"><a href="#1-THE-DISCRETE-NOISELESS-CHANNEL" class="headerlink" title="1. THE DISCRETE NOISELESS CHANNEL"></a>1. THE DISCRETE NOISELESS CHANNEL</h2><p>[^1]:  Nyquist, H., “Certain Factors Affecting Telegraph Speed,” Bell System Technical Journal, April 1924, p. 324; “Certain Topics in Telegraph Transmission Theory,” A.I.E.E. Trans., v. 47, April 1928, p. 617. ↩<br>[^2]: Hartley, R. V. L., “Transmission of Information,” Bell System Technical Journal, July 1928, p. 535.</p><hr><p>毕竟是55页的paper，分若干次更新吧hh</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="通信相关" scheme="http://wonderland.plus/categories/%E9%80%9A%E4%BF%A1%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="改变世界的Paper们" scheme="http://wonderland.plus/tags/%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C%E7%9A%84Paper%E4%BB%AC/"/>
    
  </entry>
  
  <entry>
    <title>嘿，Siri</title>
    <link href="http://wonderland.plus/posts/36772/"/>
    <id>http://wonderland.plus/posts/36772/</id>
    <published>2022-04-01T16:08:17.000Z</published>
    <updated>2022-04-03T16:53:43.891Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Siri-和-SiriKit是啥"><a href="#Siri-和-SiriKit是啥" class="headerlink" title="Siri 和 SiriKit是啥"></a>Siri 和 SiriKit是啥</h2><p>是一款内置在苹果 iOS 系统中的人工智能助理软件，“Siri” 一词在挪威语中的意思是“带领你走向胜利的美丽女神”</p><p>SiriKit 允许通过 Siri 界面并通过语音命令访问应用程序功能。</p><h2 id="SiriKit-能干啥"><a href="#SiriKit-能干啥" class="headerlink" title="SiriKit 能干啥"></a>SiriKit 能干啥</h2><ul><li>信息传递</li><li>支付相关</li><li>控制媒体</li><li>车载助手</li><li>等</li></ul><p>尽管早在 iPhone 4S 时 Siri 就是 iOS 的一部分，但直到 iOS 10 的推出，Siri 的一些功能才通过 SiriKit 提供给开发者。</p><p>SiriKit 的目的是允许 Siri 通过语音命令访问 App 的一些功能。</p><p>例如，课表管理App可以允许用户通过语音询问下一节课是什么。</p><h2 id="Siri-和-SiriKit"><a href="#Siri-和-SiriKit" class="headerlink" title="Siri 和 SiriKit"></a>Siri 和 SiriKit</h2><p>当 App 与 SiriKit 集成时，Siri 会处理：</p><ul><li>与用户交流</li><li>解释用户话语的含义</li><li>处理上下文相关的所有任务</li></ul><p>然后 Siri 将用户的请求打包成一个 <em>Intents</em>  并将其传递给 App。App负责验证是否提供了足够的信息来执行任务，并指示 Siri 请求任何缺失的信息。</p><p>一旦 <em>Intents</em>  包含所有必要的数据，App 就会执行请求的任务并将结果通知 Siri。这些结果将由 Siri 或 App 呈现。</p><p><img src="https://blogimgs-1310551706.cos.ap-beijing.myqcloud.com//SiriMessageLink.png" alt="Siri的信息传递"></p><h2 id="SiriKit-Intents"><a href="#SiriKit-Intents" class="headerlink" title="SiriKit  Intents"></a>SiriKit  Intents</h2><p>每个域都允许用户请求一组预定义的任务或意图，以由应用程序完成。意图表示 Siri 知道的特定任务，并且 SiriKit 期望集成的 iOS 应用程序能够执行该任务。</p><p>例如，消息域包括发送和搜索消息的意图，而锻炼域包含选择、开始和结束锻炼的意图。当用户通过 Siri 向某个应用发出请求时，该请求会被放入相应类型的 Intent 对象中，并传递给该应用进行处理。</p><h2 id="SiriKit-Integration-工作原理"><a href="#SiriKit-Integration-工作原理" class="headerlink" title="SiriKit Integration 工作原理"></a>SiriKit Integration 工作原理</h2><p>Siri integration 扩展作为 Target 添加到 Xcode 中的应用程序项目中。</p><p>SiriKit 提供了两种类型的扩展，其中关键的一种是 Intents 扩展。此扩展包含一个 <em>意图处理程序</em> ，它是 Intents 框架的 INExtension 类的子类，并包含 Siri 在与用户通信过程中调用的方法。</p><p>意图处理程序的职责是验证 Siri 是否已从用户那里收集到所有必需的信息，然后执行意图中定义的任务。</p><p>当用户通过 Siri 向应用发出请求时，第一个调用的方法是 Intents Extension 中包含的意图处理程序类的*handler(forIntent:)*方法。此方法传递当前意图对象并返回 将用作意图处理程序的 对象的 引用。这可以是意图处理程序类本身，也可以是已配置的为实现一个或多个意图处理协议的另一个类。</p><p>Siri 调用处理程序方法后的第一步工作会调用一系列方法来解析与意图关联的参数。</p><h2 id="解析意图参数"><a href="#解析意图参数" class="headerlink" title="解析意图参数"></a>解析意图参数</h2><p>每个意图类型都与一组参数相关联，这些参数用于提供有关应用程序要执行的任务的详细信息，其中有些是可选的: </p><blockquote><p>发送消息的意图必须包含有效的接收者参数才能发送消息。</p><p>另一方面，照片搜索意图的许多参数是可选的:</p><blockquote><p>用户可能想要搜索包含特定人物的照片，而不管照片的拍摄日期如何。</p></blockquote></blockquote><p>Siri 知道每种意图类型的所有可能参数。Siri 将要求应用程序扩展的意图处理程序通过相应的方法来 <em><strong>解析参数</strong>。</em></p><ul><li><p>如果 Siri 已经有一个参数，它将要求意图处理程序验证该参数是否有效。</p></li><li><p>如果 Siri 还没有参数的值，它将询问意图处理程序是否需要该参数。</p></li><li><p>如果意图处理程序通知 Siri 该参数不是必需的，则 Siri 不会要求用户提供它。</p></li><li><p>另一方面，如果需要该参数，Siri 会要求用户提供信息。</p></li></ul><p>一旦参数被解析或指示为不需要，Siri 将调用意图处理程序的<em><strong>确认方法</strong></em>（confirm。</p><h2 id="确认方法"><a href="#确认方法" class="headerlink" title="确认方法"></a>确认方法</h2><p>confirm 方法在扩展意图处理程序中实现，并在所有意图参数都已解析后由 Siri 调用。如果confirm 方法报告就绪状态，Siri 会调用<em><strong>处理方法</strong></em>（handle。</p><h2 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h2><p>处理方法 是执行与意图相关的活动的地方。任务完成后，会将响应传递给 Siri。响应的形式将取决于所执行活动的类型。</p><blockquote><p>照片搜索活动将返回匹配照片的数量，而发送消息活动将指示消息是否发送成功。</p></blockquote><p>handle 方法也可能返回<em>continueInApp</em>响应。这告诉 Siri 任务的其余部分将在主应用程序中执行。收到此响应后，Siri 将启动 App，并传入一个 NSUserActivity 对象。</p><blockquote><p>NSUserActivity 是一个可以保存和恢复应用程序状态的类。</p></blockquote><p>在 iOS 10 及更高版本中，NSUserActivity 类有一个额外的属性，允许 NSInteraction 对象与应用程序状态一起存储。Siri 使用这种属性来存储会话的 NSInteraction 对象并将其传递给主 iOS 应用程序。</p><p>例如，照片搜索意图需要使用<em>continueInApp</em>响应和用户活动对象，以便可以将搜索期间找到的照片呈现给用户（SiriKit 目前不提供一种机制来显示来自照片搜索意图的图像Siri 用户界面）。</p><p>一个意图处理程序类可能包含多个 handle 方法来处理不同的意图类型。</p><h1 id="ToDo"><a href="#ToDo" class="headerlink" title="ToDo"></a>ToDo</h1><ol><li><p>+ Capability Siri （需要开发者账户</p></li><li><p><em>Info.plist</em>     <em>Privacy – Siri Usage Description</em> </p></li><li><p>调用 INPreferences 类的*requestSiriAuthorization()*类方法 应该在应用程序第一次运行时进行此调用，不仅可以获取授权，还可以让用户了解应用程序包含 Siri 支持  <em>scenePhase</em>   <em>onChange()</em> </p></li><li><p>将 Intents 扩展添加到准备开始 SiriKit 集成的项目中将 Intents 扩展添加到准备开始 SiriKit 集成的项目中</p><p><em>Target…</em>Intents Extension</p></li></ol><p>未待完续…………</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="iOS开发" scheme="http://wonderland.plus/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="SiriKit" scheme="http://wonderland.plus/tags/SiriKit/"/>
    
  </entry>
  
  <entry>
    <title>一笔画的背后</title>
    <link href="http://wonderland.plus/posts/40687/"/>
    <id>http://wonderland.plus/posts/40687/</id>
    <published>2022-03-31T15:00:03.000Z</published>
    <updated>2022-04-02T14:05:48.495Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天排队论的老师讲起了图论hhh</p><p>让我想起了小时候看的有关一笔画的东西，能不能一笔画成的规律倒是知道，但竟一直没想过如何证明证明。</p><p>今天正好借着图论开课的机会重新想一想，然后就翻到了欧拉的证明，大道至简，清晰的思维值得记录。</p><h2 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h2><p><strong>一笔画问题（Eulerian graph）</strong>是图论中一个著名的问题。一笔画问题起源于柯尼斯堡七桥问题。数学家欧拉在他1736年发表的论文《柯尼斯堡的七桥》中不仅解决了七桥问题，也提出了<strong>一笔画定理</strong>，解决了一笔画问题。</p><p>欧拉的研究是图论的开端。</p><p>莱布尼茨在1670年写给惠更斯的一封信中写道：</p><blockquote><p>我不满足于代数，因为它既不能给出最短的证明，也不能给出最漂亮的几何结构。因此，考虑到这一点，我认为我们还需要另一种分析，几何的或线性的，直接处理位置，就像代数处理数值那样。</p></blockquote><p>莱布尼茨的研究如今被称为 <strong>拓扑学</strong>，但作为一个数学领域在当时发展缓慢。正如高斯在1833年指出的</p><blockquote><p>莱布尼茨开创了位置几何学，但当时只有欧拉和范德蒙（对，就是范德蒙行列式那位）两位几何学家对其略知一二。一个半世纪后，我们才懂得并掌握了这一几何学。</p></blockquote><p>就是在高斯口中对几何学 <em>略知一二</em> 的欧拉的一篇论文，被誉为是西方现代图论的起点。</p><p>在数学界，18世纪被誉为是欧拉的时代。令人惊讶的是，欧拉的近900本书、论文和其他作品中，有近一半是在1771年几乎完全失明后写的。（天才况且如此……</p><p><img src="https://blogimgs-1310551706.cos.ap-beijing.myqcloud.com/euler.jpg" alt="欧拉"></p><p>在1736年的 <em>Commentarii Academiae Scientiarum Imperialis Petropolitanae</em> 上，欧拉对现在著名的柯尼斯堡桥问题进行了数学描述：有没有可能计划在柯尼斯堡镇漫步一次，但是这座镇上的七座桥每座桥只能穿过一次？</p><blockquote><p>The problem, which I am told is widely known, is as follows: in K¨onigsberg in Prussia, there is an island A, called the Kneiphof ; the river which surrounds it is divided into two branches, as can be seen in Fig. [1.2], and these branches are crossed by seven bridges, a, b , c , d , e , f and g. Concerning these bridges, it was asked whether anyone could arrange a route in such a way that he would cross each bridge once and only once. I was told that some people asserted that this was impossible, while others were in doubt: but nobody would actually assert that it could be done. From this, I have formulated the general problem: whatever be the arrangement and division of the river into branches, and however many bridges there be, can one ﬁnd out whether or not it is possible to cross each bridge exactly once?</p></blockquote><p><img src="/../images/%E4%B8%80%E7%AC%94%E7%94%BB%E7%9A%84%E8%83%8C%E5%90%8E/7bridge.png" alt="七桥图示"></p><p>像其他早期的图论工作一样，柯尼斯堡七桥问题看起来只不过是一个有趣的谜题。然而，从这种看似琐碎的起源，图论发展成为一种强大而深刻的数学理论，如今在物理、生物和社会科学中有着广泛的应用。</p><h2 id="证明它！"><a href="#证明它！" class="headerlink" title="证明它！"></a>证明它！</h2><h4 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h4><p>在开始证明之前，值得注意的是欧拉将城市复杂的画卷（见封图）抽象成了简单的草图，在现代图论中，我们进行了进一步的简化（仅保留点和连接点的线）。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>当然有一种大力出奇迹的方法可以证明这个问题，就是列出所有可能的情况，找不到符合题设的就OK了。但是这种方法有几点弊端：</p><ul><li>不适用于更复杂的情况（兄弟，真的遍历不完的</li><li>不能抽象为理论！！（这很重要，琐碎变为伟大的关键</li><li>会浪费注意力在那些根本不可能成为答案的路径上</li></ul><p>欧拉的整个方法依赖于一种特别方便的方式，用这种方式可以表示桥梁之间的关系。</p><h4 id="问题表示方法"><a href="#问题表示方法" class="headerlink" title="问题表示方法"></a>问题表示方法</h4><p>我们使用大写字母A、B、C、D表示河流分隔的每个陆地区域（见上图）。如果一个旅行者通过a桥或b桥从A到B，将其写为AB</p><blockquote><p>AB中第一个字母指的是旅行者离开的区域，第二个字母指的是他过桥后到达的区域。</p></blockquote><p>因此，如果旅客离开B，穿过f桥进入D，则该路径用BD表示，两个路径AB和BD的组合用三个字母ABD表示，其中中间字母B表示第一条路径结束的区域和第二条路径开始的区域。如果旅行者又穿过桥g从D到C，我将用四个字母ABDC来表示这三个连续的路径</p><blockquote><p>这四个字母ABDC意味着旅行者从A开始，穿过B，再到D，最后到达C。</p></blockquote><p>由于每个陆地区域都被一条河的支流隔开，若要走过A、B、C、D 四个地方，旅行者必须穿过三座桥。类似地，四座桥的连续跨越将由五个字母表示。所以一般来说，无论旅行者跨越多少座桥，他的旅程都可以由一个比桥的数量大一个的字母来表示。因此，<strong>跨越七座桥需要八个字母来代表它</strong>。</p><blockquote><p>欧拉的这种表示方法使得图表本身对于解决问题变得不再必要，在现代图论中，我们用集合$V &#x3D; {v_0, v_1, \ldots , v_n}$ 和集合 $E &#x3D; {e_0, e_1, \ldots , e_m}$ 来表示，其中集合$V$ 代表顶点的集合， $E$ 代表连接顶点的边的集合。</p></blockquote><p>如果有一条回路可以遍历所有的顶点而每一条边只走过一次，那这样的路就被称作欧拉路径（包含所有顶点的迹），也是本题设想要寻找的路径。</p><p>另有更严格的条件：欧拉回路（包含所有顶点的迹且首位相接）</p><h4 id="存在吗？"><a href="#存在吗？" class="headerlink" title="存在吗？"></a>存在吗？</h4><p>因此，问题归结为找到由四个字母A、B、C、D组成的八个字母序列，其中A、B、C、D又重复。在寻找这样一个序列之前，先弄清楚是否有可能以这种方式排列字母（即找到题设路径），因为如果可以<strong>证明没有这样的排列存在</strong>，那么任何查找排列的工作都是毫无意义的。</p><p>为了尝试这样的规则，我考虑了单个区域A，有a、b、c、d 四座桥与A关连。让我们先来看看通向A的单个桥：如果一个旅行者穿过这座桥，他必须在穿越前或者在穿越后到达A，因此在任何一种情况下，字母a都会在上述表示中出现一次。如果有三座桥（比如a、b和c）通向A，如果旅行者穿过这三座桥，那么在他的旅程中，无论他是否从a开始他的旅程，字母a都将出现两次。类似地，如果五座桥通向A，那么在通过所有桥的表示中，字母A会出现三次。</p><p>因此，在柯尼斯堡七桥的问题的路线表示中，因为五座桥（a、b、c、d、e）通向A区，所以字母A必须出现三次。接下来，由于三座桥通向b，字母b必须出现两次；类似地，D必须出现两次，C也一样。因此，在一系列八个字母中，代表通过七座桥的路径，字母A必须出现三次，字母B、C和D各出现两次——但这不能在八个字母的序列中出现（$3+2+2+2&gt;8$）。因此，这样的旅程不能跨越柯尼斯堡的七座桥。</p><p>更进一步，只要通往每个区域的桥梁数量是奇数，无论桥梁如何布置，都可以判断不可能一次旅行穿越每座桥梁而不重复。因为要满足条件的话所有字母必须出现的次数之和比桥的数量多一个，然而，像我们的例子中所发生的那样，事实上需要字母出现的数量大于桥梁的数量加一，那么这样的旅程永远无法完成。</p><h4 id="怎样才会存在？"><a href="#怎样才会存在？" class="headerlink" title="怎样才会存在？"></a>怎样才会存在？</h4><p>如果通向 A 的桥的数目是偶数，那么就必须考虑是否在 A 地出发</p><blockquote><p>比如有两座桥 a、b 连接 A、B，那么在 A 出发的路径可以是 A B A ，否则是 B A B</p></blockquote><p>如果有<strong>四座</strong>桥通向A，如果旅行者从A出发，那么在整个旅程中，如果他要穿过每座桥一次，字母A必须出现三次；如果他在另一个区域开始行走，那么字母A将出现<strong>两次</strong>。</p><p>如果有<strong>六座</strong>桥通向A，如果旅程从A开始，那么字母A将出现<strong>四次</strong>；如果旅行者没有从A开始，那么字母A只出现<strong>三次</strong>。</p><p>所以，<strong>一般来说</strong>，如果桥的数量是偶数，那么如果行程不是从A开始，A的出现次数将是这个数字的一半，如果行程从A开始，A的出现次数将比桥的一半多一个。</p><p>由于在任何旅程中，一个人只能从一个区域出发。这样就可以根据通往每个区域的桥梁数量，确定表示该区域的字母出现的数量。如果桥梁数量为奇数，为桥梁数量的一半加一；如果桥梁数量为偶数，则为其一半。最后，如果所有事件的总数等于桥的数量加上一，那么满足要求的行程将是可能的，并且必须从一个有奇数座桥通往它的区域开始。当然，如果得到的字母总数比桥梁数加一小一，那么旅程可以从一个桥梁数为偶数的区域开始，这样字母数将因此增加一。</p><blockquote><p>请注意，欧拉对“表示该区域的字母出现次数”的定义取决于通向每个区域（顶点）的桥（边）的数量是偶数还是奇数。在当代图论术语中，入射到顶点$V$上的边数被称为顶点$v$的“度”。</p></blockquote><p>因此，无论给出了什么样的桥梁布置，欧拉给出的以下方法将确定是否可以穿过每座桥梁：</p><ul><li><p>首先用字母 A、B、C 等表示被水隔开的各个区域。</p></li><li><p>然后，取桥的总数加上一，把结果写在下面的工作上面。</p></li><li><p>第三，把字母A、B、C等写在一列中，并在每一个旁边写下通向它的桥梁的数量。</p></li><li><p>第四，用星号表示那些有偶数桥的字母。</p></li><li><p>第五，在每一个偶数旁边写下一半的数字，在每一个奇数旁边写下一半的数字加一。</p></li><li><p>第六，把这些数字加起来，如果这个总和小于或等于上面写的数字，也就是桥的数量加上一，就得出结论，满足要求的旅程是可能的。</p><blockquote><p>必须记住，如果总和比上面写的数字小一，那么旅程必须从标有星号的区域之一开始，如果总和相等，则必须从未标有星号的区域开始。</p></blockquote><p>柯尼斯堡镇七桥问题的求解：</p><p>七座桥，$7+1&#x3D;8$</p><table><thead><tr><th align="center">地区</th><th align="center">相邻桥数</th><th align="center">通过地区次数</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">5</td><td align="center">3</td></tr><tr><td align="center">B</td><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">C</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">D</td><td align="center">3</td><td align="center">2</td></tr></tbody></table><p>显然 $3+2+2+2&gt;8$ 不满足题设</p></li></ul><p>再举一个例子，假设有如下图的排布</p><p><img src="/../images/%E4%B8%80%E7%AC%94%E7%94%BB%E7%9A%84%E8%83%8C%E5%90%8E/15bridge.png" alt="15桥"></p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center">16</th></tr></thead><tbody><tr><td align="center">A*</td><td align="center">8</td><td align="center">4</td></tr><tr><td align="center">B*</td><td align="center">4</td><td align="center">2</td></tr><tr><td align="center">C*</td><td align="center">4</td><td align="center">2</td></tr><tr><td align="center">D*</td><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">E</td><td align="center">5</td><td align="center">3</td></tr><tr><td align="center">F*</td><td align="center">6</td><td align="center">3</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">16</td></tr></tbody></table><p>按照上述规则，我们可以找到如下路径：</p><p>​        <strong>EaFbBcFdAeFfCgAhCiDkAmEnApBoEiD</strong></p><p>这就是本题中的“欧拉路径”</p><h3 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h3><p>尽管上述方法已经可以在复杂的情况下找到欧拉路径（如果存在的话），但欧拉并没有止步于此，他找到了一种更抽象更简洁的方法来表达这一思想。</p><p>首先，观察到字母A、B、C等旁边写的桥的数量加起来是桥总数的两倍。原因是，在计算中，每一座通往某一特定区域的桥梁都会被计算两次，每一座桥梁连接的两个区域各计算一次。</p><p>因此，通往每个区域的桥梁总数必须为偶数（其一半等于桥梁数量）。进一步，字母A、B、C等的一些桥的数量中只有一个是奇数，或者三个是奇数，或者五个，等等，这是不可能的。因此，如果字母A、B、C等的一些桥的数量是奇数，那么这些区域的数量一定是偶数。</p><blockquote><p>在七桥问题中，字母A、B、C和D都有奇数个桥相邻，在最后一个例子中，只有两个数字是奇数，即D和E。</p></blockquote><p>上述结果也被称为“握手定理”，源于计算社交聚会期间发生的握手次数的等效问题。在社交聚会上，每个在场的人与其他在场的人握手一次。握手定理的现代表述是：“<strong>有限图中所有顶点的度之和等于图中边数的两倍。</strong>” 或 “<strong>每个有限图包含偶数个奇数度的顶点。</strong>”</p><p>由于字母 A、B、C 等所相邻的桥数的总和等于桥数的两倍。很明显，如果该总和增加2，然后再除以2，将得到我们所想要的数字（桥数加一）。因此，如果字母 A、B、C 等的所有数字（第二列）都是偶数，并且取其中的一半来获得第三列中的数字，那么这些数字的总和将比上面写的数字（桥数加一）少一个，而我们开始行走的地方需要加一，则无论是什么地方开始旅程，都可以找到符合要求的路径。在七桥问题中，如果旅行者两次穿过每座桥，就会发生这种情况（每座桥都可以被视为不同的两座）。</p><p>此外，如果字母 A、B、C 等所相邻的桥数中只有两个是奇数，其余的是偶数，那么，如果旅程从一个有奇数座桥梁通往的区域开始，那么得到符合条件的路径是可能的。因为，如果偶数减半，奇数增加一，它们的一半之和将比桥的数量大一，因此等于上面写的数字。从这可以进一步看出，如果有四，六，八……个奇数出现在第二列，那么第三列中的数字之和将比桥数大2，3，4……甚至更多。那么找到符合题设的路径将是不可能的。</p><p>至此，得到了为人们所熟知的结论，即：</p><blockquote><p>无论桥如何排列，如果有两个以上的地区有奇数座桥梁通往，那么找到符合要求的路径是不可能的。<br>如果恰好有两个区域的桥梁数量是奇数，那么如果从这两个区域中的任何一个开始，找到符合要求的路径都是可能的。<br>如果没有奇数座桥梁通往的区域，那么可以从任何区域开始完成所需的旅程。</p></blockquote><h3 id="找到路径！"><a href="#找到路径！" class="headerlink" title="找到路径！"></a>找到路径！</h3><p>如果知道了在合适条件下必然存在符合题设路径，如何找到呢？ 关于这个问题，欧拉给出了答案（给了，但是又没给hhh）</p><p>欧拉原话：</p><blockquote><p>I do not therefore think it worthwhile to give any further details concerning the ﬁnding of the routes.</p></blockquote><p>理由是对于一个区域，我们可以成对的忽视桥梁，这样结构就被大大简化，所以便可以轻而易举的找到路径。</p><h3 id="现代表述"><a href="#现代表述" class="headerlink" title="现代表述"></a>现代表述</h3><p>要得到欧拉主要结果的完整现代陈述，我们需要几个定义</p><p>连通：</p><blockquote><p>对于图 G 的两个顶点 u 和 v ，如果在中存在一条路，记为 (u,v) 路，则称 u 和 v 是连通的。如果图 G 不连通，则它每一个分支是连通的</p></blockquote><p>根据这一定义，Euler论文的主要结果如下：</p><h5 id="Theorem：有限图G包含Euler回路当且仅当G是连通的且不包含奇数度顶点。"><a href="#Theorem：有限图G包含Euler回路当且仅当G是连通的且不包含奇数度顶点。" class="headerlink" title="Theorem：有限图G包含Euler回路当且仅当G是连通的且不包含奇数度顶点。"></a>Theorem：有限图G包含Euler回路当且仅当G是连通的且不包含奇数度顶点。</h5><h5 id="Corollary：有限图G包含Euler路径当且仅当G是连通的且至多包含两个奇数度顶点。"><a href="#Corollary：有限图G包含Euler路径当且仅当G是连通的且至多包含两个奇数度顶点。" class="headerlink" title="Corollary：有限图G包含Euler路径当且仅当G是连通的且至多包含两个奇数度顶点。"></a>Corollary：有限图G包含Euler路径当且仅当G是连通的且至多包含两个奇数度顶点。</h5><p>当然，欧拉的证明与现代证明有所不同，但欧拉的这项工作为几何学特别是图论翻开了新的一页。</p><p>就这样，<em><strong>是否可以不重复的走遍七座桥</strong></em> 这样一个看似“没啥用”的问题，经过百年的发展，如今成为了可以许多学科问题的便利工具。</p><p>所以，多做点“没用的事”，挺好。</p>]]></content>
    
    
    <summary type="html">数学让我们超越人类直觉，使我们能够探索人类无法触及的领域</summary>
    
    
    
    <category term="拓扑学/图论" scheme="http://wonderland.plus/categories/%E6%8B%93%E6%89%91%E5%AD%A6-%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="http://wonderland.plus/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>四旋翼无人机的最基础</title>
    <link href="http://wonderland.plus/posts/4179/"/>
    <id>http://wonderland.plus/posts/4179/</id>
    <published>2022-03-29T09:13:40.000Z</published>
    <updated>2022-04-02T14:05:48.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="四旋翼无人机"><a href="#四旋翼无人机" class="headerlink" title="四旋翼无人机"></a>四旋翼无人机</h1><h2 id="三系统"><a href="#三系统" class="headerlink" title="三系统"></a>三系统</h2><h3 id="动力系统"><a href="#动力系统" class="headerlink" title="动力系统"></a>动力系统</h3><ul><li><p>旋翼</p><p>伯努利原理、反扭矩</p></li><li><p>电机</p><p>可采用PWM控制的有刷电机</p></li><li><p>电池</p></li></ul><h3 id="飞控"><a href="#飞控" class="headerlink" title="飞控"></a>飞控</h3><p>姿态的  <strong>采集</strong>  <strong>解算</strong>  <strong>控制</strong> </p><ul><li><p>嵌入式系统</p></li><li><p>无线通信</p></li><li><p>姿态传感器</p><blockquote><p>卡尔曼滤波</p></blockquote></li><li><p>气压计</p></li></ul><h3 id="操控系统"><a href="#操控系统" class="headerlink" title="操控系统"></a>操控系统</h3><h2 id="动力原理"><a href="#动力原理" class="headerlink" title="动力原理"></a>动力原理</h2><h3 id="反扭矩"><a href="#反扭矩" class="headerlink" title="反扭矩"></a>反扭矩</h3><p>对角线上的旋翼同方向旋转，两条对角线上产生的扭矩相互抵消，使得飞机机身保持稳定。</p><h3 id="六自由度运动"><a href="#六自由度运动" class="headerlink" title="六自由度运动"></a>六自由度运动</h3><h5 id="直线运动"><a href="#直线运动" class="headerlink" title="直线运动"></a>直线运动</h5><p>X、Y、Z三轴</p><h5 id="角运动"><a href="#角运动" class="headerlink" title="角运动"></a>角运动</h5><p>俯仰、滚转、偏航</p><h5 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h5><p>$f_1$ 、$f_2$ 、$f_3$ 、 $f_4$ 四个旋翼产生的升力控制飞机姿态</p><ul><li>$f_1$ + $f_2$ $\ne$ $f_3$ + $f_4$  控制俯仰 <strong>Pitch</strong></li><li>$f_1$ + $f_3$ $\ne$ $f_2$ + $f_4$  控制偏航 <strong>Yaw</strong></li><li>$f_2$ + $f_3$ $\ne$ $f_1$ + $f_4$ 控制滚转 <strong>Rool</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="嵌入式开发" scheme="http://wonderland.plus/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="UAV" scheme="http://wonderland.plus/tags/UAV/"/>
    
  </entry>
  
  <entry>
    <title>ARKit基础之位置追踪</title>
    <link href="http://wonderland.plus/posts/6421/"/>
    <id>http://wonderland.plus/posts/6421/</id>
    <published>2022-03-29T09:05:12.000Z</published>
    <updated>2022-04-02T14:05:48.491Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="位置追踪"><a href="#位置追踪" class="headerlink" title="位置追踪"></a>位置追踪</h2><h3 id="SLAM"><a href="#SLAM" class="headerlink" title="SLAM"></a>SLAM</h3><blockquote><p>即Simultaneous Localization And Mapping ，即时定位与建图。</p></blockquote><h4 id="定位与定姿"><a href="#定位与定姿" class="headerlink" title="定位与定姿"></a>定位与定姿</h4><p>主要采用<strong>视觉惯性里程计(VIO)<strong>和</strong>惯性导航系统</strong> </p><blockquote><p>VIO: Visual Inertial Odomentry</p></blockquote><p>综合使用VIO与惯性导航可以实时追踪用户的位置。VIO在刷新帧之间计算用户的位置<em>每秒30次以上，并行计算两次，至少以保证流畅</em> 。VIO与惯性导航系统并行计算，计算完成后使用卡尔曼滤波或者非线性优化等手段结合两个系统结过给出最终结果。</p><blockquote><p>6DOF为X、Y、Z加上俯仰、偏转、翻滚</p></blockquote><blockquote><p>惯性检测单元（IMU）：加速度计和陀螺仪</p></blockquote><table><thead><tr><th>惯性导航系统优点</th><th>精度高，每秒1000次运算</th></tr></thead><tbody><tr><td>惯性导航系统缺点</td><td>随与视觉系统复位时间而降低精度</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="iOS开发" scheme="http://wonderland.plus/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="ARKit" scheme="http://wonderland.plus/tags/ARKit/"/>
    
  </entry>
  
  <entry>
    <title>ARKit基础</title>
    <link href="http://wonderland.plus/posts/13868/"/>
    <id>http://wonderland.plus/posts/13868/</id>
    <published>2022-03-29T07:43:06.000Z</published>
    <updated>2022-04-02T14:05:48.489Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ARKit-基础"><a href="#ARKit-基础" class="headerlink" title="ARKit 基础"></a>ARKit 基础</h1><h4 id="ARKit-x3D-AVFoundation-CoreMotion-CoreML"><a href="#ARKit-x3D-AVFoundation-CoreMotion-CoreML" class="headerlink" title="ARKit &#x3D; AVFoundation + CoreMotion + CoreML"></a>ARKit &#x3D; AVFoundation + CoreMotion + CoreML</h4><h4 id="图像-x2F-3D检测识别跟踪、人脸遮挡OK-、同时开前后摄像头、多人协作、"><a href="#图像-x2F-3D检测识别跟踪、人脸遮挡OK-、同时开前后摄像头、多人协作、" class="headerlink" title="图像&#x2F;3D检测识别跟踪、人脸遮挡OK?、同时开前后摄像头、多人协作、"></a>图像&#x2F;3D检测识别跟踪、人脸遮挡OK?、同时开前后摄像头、多人协作、</h4><h4 id="景深、地理位置锚点"><a href="#景深、地理位置锚点" class="headerlink" title="景深、地理位置锚点"></a>景深、地理位置锚点</h4><h4 id="不包含图形渲染API，使用RealityKit、SceneKit、SpriteKit、Metal等"><a href="#不包含图形渲染API，使用RealityKit、SceneKit、SpriteKit、Metal等" class="headerlink" title="不包含图形渲染API，使用RealityKit、SceneKit、SpriteKit、Metal等"></a>不包含图形渲染API，使用RealityKit、SceneKit、SpriteKit、Metal等</h4><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><ul><li>在运动中做运动跟踪</li><li>跟踪动态环境（湖面）</li><li>热漂移（手机升温）</li><li>昏暗环境</li></ul><h3 id="ARSession"><a href="#ARSession" class="headerlink" title="ARSession"></a>ARSession</h3><h5 id="管理AR应用的状态和整个生命周期，ARKit-API-的主要入口"><a href="#管理AR应用的状态和整个生命周期，ARKit-API-的主要入口" class="headerlink" title="管理AR应用的状态和整个生命周期，ARKit API 的主要入口"></a>管理AR应用的状态和整个生命周期，ARKit API 的主要入口</h5><h3 id="ARAnchor（AR锚点）"><a href="#ARAnchor（AR锚点）" class="headerlink" title="ARAnchor（AR锚点）"></a>ARAnchor（AR锚点）</h3><h5 id="无法添加虚拟元素"><a href="#无法添加虚拟元素" class="headerlink" title="无法添加虚拟元素"></a>无法添加虚拟元素</h5><h5 id="将虚拟物体固定到AR场景中"><a href="#将虚拟物体固定到AR场景中" class="headerlink" title="将虚拟物体固定到AR场景中"></a>将虚拟物体固定到AR场景中</h5><h4 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h4><h5 id="视觉校准技术，使锚点姿态不随着时间变化"><a href="#视觉校准技术，使锚点姿态不随着时间变化" class="headerlink" title="视觉校准技术，使锚点姿态不随着时间变化"></a>视觉校准技术，使锚点姿态不随着时间变化</h5><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><h5 id="1-在可跟踪对象上（平面、人脸等）创建锚点"><a href="#1-在可跟踪对象上（平面、人脸等）创建锚点" class="headerlink" title="1. 在可跟踪对象上（平面、人脸等）创建锚点"></a>1. 在可跟踪对象上（平面、人脸等）创建锚点</h5><h5 id="2-将虚拟物体链接到锚点"><a href="#2-将虚拟物体链接到锚点" class="headerlink" title="2. 将虚拟物体链接到锚点"></a>2. 将虚拟物体链接到锚点</h5><h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><ul><li>虚拟物体“焊接”到某物体上</li><li>姿态不变</li><li>几个虚拟物体相对位置不变、独立性</li><li>提高跟踪性</li></ul><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>尽可能重复使用锚点（独立锚点的对象可以 平移&#x2F;旋转）</li><li>保持物体靠近锚点（1m）</li><li>分离未使用的锚点</li></ul><h4 id="种类："><a href="#种类：" class="headerlink" title="种类："></a>种类：</h4><ul><li>ARPlaneAnchor     平面</li><li>ARImageAnchor 2D图像</li><li>ARObjectAnchor 3D物体</li><li>ARFaceAnchor     人脸（姿态、表情）</li><li>ARBodyAnchor    人体</li><li>ARParticeipantAnchor  多人共享的</li><li>AREnvironmentProbeAnchor  环境光探头</li><li>ARMeshAnchor  使用LiDAR重建场景的场景网格的Anchor</li><li>ARGeoAnchor 地理位置信息</li></ul><h3 id="ARFrame（AR帧）"><a href="#ARFrame（AR帧）" class="headerlink" title="ARFrame（AR帧）"></a>ARFrame（AR帧）</h3><h5 id="相比于视频流包含了与AR有关的参数"><a href="#相比于视频流包含了与AR有关的参数" class="headerlink" title="相比于视频流包含了与AR有关的参数"></a>相比于视频流包含了与AR有关的参数</h5><h3 id="RealityKit"><a href="#RealityKit" class="headerlink" title="RealityKit"></a>RealityKit</h3><h5 id="专为AR设计"><a href="#专为AR设计" class="headerlink" title="专为AR设计"></a>专为AR设计</h5><h4 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h4><ul><li>渲染（反射、阴影）</li><li>动画（骨骼&#x2F;变换 动画）</li><li>物理仿真</li><li>网络同步：整合了近距离通信框架</li><li>实体组件：避免了多继承（swift不支持）的维护问题</li><li>3D音效</li><li>其他很多功能自动处理</li></ul><h4 id="体系架构："><a href="#体系架构：" class="headerlink" title="体系架构："></a>体系架构：</h4><ul><li>ARView<ul><li>将渲染场景呈现给用户的一个窗口</li><li>都包含Scene实例</li><li>处理输入交互</li></ul></li><li>Scene<ul><li>放置实体对象的容器</li><li>创建ARView时自动创建</li><li>可通过ARView的属性访问</li></ul></li><li>AnchorEntity<ul><li>继承自Entity类</li><li>挂载了AnchorComponent组件</li></ul></li><li>Entity<ul><li>AR应用最基本组成元素</li><li>遵循Component协议、包含components集合，用于挂在各类组件</li><li>层次结构可以保存到文件中</li><li>预定义了8类实体</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="iOS开发" scheme="http://wonderland.plus/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="ARKit" scheme="http://wonderland.plus/tags/ARKit/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="http://wonderland.plus/posts/35811/"/>
    <id>http://wonderland.plus/posts/35811/</id>
    <published>2022-03-29T07:23:07.000Z</published>
    <updated>2022-04-02T14:05:48.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>没啥好说的，所以就不说。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="杂" scheme="http://wonderland.plus/tags/%E6%9D%82/"/>
    
  </entry>
  
</feed>
